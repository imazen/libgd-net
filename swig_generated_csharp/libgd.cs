/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Imazen.LibGD.Native {

using System;
using System.Runtime.InteropServices;

public class libgd {
  public static int gdAlphaBlend(int dest, int src) {
    int ret = libgdPINVOKE.gdAlphaBlend(dest, src);
    return ret;
  }

  public static void gdSetErrorMethod(SWIGTYPE_p_f_int_p_q_const__char_va_list__void arg0) {
    libgdPINVOKE.gdSetErrorMethod(SWIGTYPE_p_f_int_p_q_const__char_va_list__void.getCPtr(arg0));
  }

  public static void gdClearErrorMethod() {
    libgdPINVOKE.gdClearErrorMethod();
  }

  public static gdImage gdImageCreate(int sx, int sy) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreate(sx, sy);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateTrueColor(int sx, int sy) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateTrueColor(sx, sy);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromPng(SWIGTYPE_p_FILE fd) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromPng(SWIGTYPE_p_FILE.getCPtr(fd));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromPngCtx(SWIGTYPE_p_gdIOCtxPtr arg0) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromPngCtx(SWIGTYPE_p_gdIOCtxPtr.getCPtr(arg0));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    if (libgdPINVOKE.SWIGPendingException.Pending) throw libgdPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static gdImage gdImageCreateFromPngPtr(int size, SWIGTYPE_p_void data) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromPngPtr(size, SWIGTYPE_p_void.getCPtr(data));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromGif(SWIGTYPE_p_FILE fd) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromGif(SWIGTYPE_p_FILE.getCPtr(fd));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromGifCtx(SWIGTYPE_p_gdIOCtxPtr arg0) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromGifCtx(SWIGTYPE_p_gdIOCtxPtr.getCPtr(arg0));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    if (libgdPINVOKE.SWIGPendingException.Pending) throw libgdPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static gdImage gdImageCreateFromGifPtr(int size, SWIGTYPE_p_void data) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromGifPtr(size, SWIGTYPE_p_void.getCPtr(data));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromWBMP(SWIGTYPE_p_FILE inFile) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromWBMP(SWIGTYPE_p_FILE.getCPtr(inFile));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromWBMPCtx(SWIGTYPE_p_gdIOCtx infile) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromWBMPCtx(SWIGTYPE_p_gdIOCtx.getCPtr(infile));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromWBMPPtr(int size, SWIGTYPE_p_void data) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromWBMPPtr(size, SWIGTYPE_p_void.getCPtr(data));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromJpeg(SWIGTYPE_p_FILE infile) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromJpeg(SWIGTYPE_p_FILE.getCPtr(infile));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromJpegEx(SWIGTYPE_p_FILE infile, int ignore_warning) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromJpegEx(SWIGTYPE_p_FILE.getCPtr(infile), ignore_warning);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromJpegCtx(SWIGTYPE_p_gdIOCtx infile) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromJpegCtx(SWIGTYPE_p_gdIOCtx.getCPtr(infile));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromJpegCtxEx(SWIGTYPE_p_gdIOCtx infile, int ignore_warning) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromJpegCtxEx(SWIGTYPE_p_gdIOCtx.getCPtr(infile), ignore_warning);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromJpegPtr(int size, SWIGTYPE_p_void data) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromJpegPtr(size, SWIGTYPE_p_void.getCPtr(data));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromJpegPtrEx(int size, SWIGTYPE_p_void data, int ignore_warning) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromJpegPtrEx(size, SWIGTYPE_p_void.getCPtr(data), ignore_warning);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromWebp(SWIGTYPE_p_FILE inFile) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromWebp(SWIGTYPE_p_FILE.getCPtr(inFile));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromWebpPtr(int size, SWIGTYPE_p_void data) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromWebpPtr(size, SWIGTYPE_p_void.getCPtr(data));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromWebpCtx(SWIGTYPE_p_gdIOCtx infile) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromWebpCtx(SWIGTYPE_p_gdIOCtx.getCPtr(infile));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromTiff(SWIGTYPE_p_FILE inFile) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromTiff(SWIGTYPE_p_FILE.getCPtr(inFile));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromTiffCtx(SWIGTYPE_p_gdIOCtx infile) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromTiffCtx(SWIGTYPE_p_gdIOCtx.getCPtr(infile));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromTiffPtr(int size, SWIGTYPE_p_void data) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromTiffPtr(size, SWIGTYPE_p_void.getCPtr(data));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromTga(SWIGTYPE_p_FILE fp) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromTga(SWIGTYPE_p_FILE.getCPtr(fp));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromTgaCtx(SWIGTYPE_p_gdIOCtx ctx) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromTgaCtx(SWIGTYPE_p_gdIOCtx.getCPtr(ctx));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromTgaPtr(int size, SWIGTYPE_p_void data) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromTgaPtr(size, SWIGTYPE_p_void.getCPtr(data));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromBmp(SWIGTYPE_p_FILE inFile) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromBmp(SWIGTYPE_p_FILE.getCPtr(inFile));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromBmpPtr(int size, SWIGTYPE_p_void data) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromBmpPtr(size, SWIGTYPE_p_void.getCPtr(data));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromBmpCtx(SWIGTYPE_p_gdIOCtxPtr infile) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromBmpCtx(SWIGTYPE_p_gdIOCtxPtr.getCPtr(infile));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    if (libgdPINVOKE.SWIGPendingException.Pending) throw libgdPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static gdImage gdImageCreateFromPngSource(SWIGTYPE_p_gdSourcePtr arg0) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromPngSource(SWIGTYPE_p_gdSourcePtr.getCPtr(arg0));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    if (libgdPINVOKE.SWIGPendingException.Pending) throw libgdPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static gdImage gdImageCreateFromGd(SWIGTYPE_p_FILE arg0) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromGd(SWIGTYPE_p_FILE.getCPtr(arg0));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromGdCtx(SWIGTYPE_p_gdIOCtxPtr arg0) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromGdCtx(SWIGTYPE_p_gdIOCtxPtr.getCPtr(arg0));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    if (libgdPINVOKE.SWIGPendingException.Pending) throw libgdPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static gdImage gdImageCreateFromGdPtr(int size, SWIGTYPE_p_void data) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromGdPtr(size, SWIGTYPE_p_void.getCPtr(data));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromGd2(SWIGTYPE_p_FILE arg0) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromGd2(SWIGTYPE_p_FILE.getCPtr(arg0));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromGd2Ctx(SWIGTYPE_p_gdIOCtxPtr arg0) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromGd2Ctx(SWIGTYPE_p_gdIOCtxPtr.getCPtr(arg0));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    if (libgdPINVOKE.SWIGPendingException.Pending) throw libgdPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static gdImage gdImageCreateFromGd2Ptr(int size, SWIGTYPE_p_void data) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromGd2Ptr(size, SWIGTYPE_p_void.getCPtr(data));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromGd2Part(SWIGTYPE_p_FILE arg0, int srcx, int srcy, int w, int h) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromGd2Part(SWIGTYPE_p_FILE.getCPtr(arg0), srcx, srcy, w, h);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromGd2PartCtx(SWIGTYPE_p_gdIOCtxPtr arg0, int srcx, int srcy, int w, int h) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromGd2PartCtx(SWIGTYPE_p_gdIOCtxPtr.getCPtr(arg0), srcx, srcy, w, h);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    if (libgdPINVOKE.SWIGPendingException.Pending) throw libgdPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static gdImage gdImageCreateFromGd2PartPtr(int size, SWIGTYPE_p_void data, int srcx, int srcy, int w, int h) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromGd2PartPtr(size, SWIGTYPE_p_void.getCPtr(data), srcx, srcy, w, h);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCreateFromXbm(SWIGTYPE_p_FILE arg0) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromXbm(SWIGTYPE_p_FILE.getCPtr(arg0));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static void gdImageXbmCtx(gdImage image, string file_name, int fg, SWIGTYPE_p_gdIOCtx arg3) {
    libgdPINVOKE.gdImageXbmCtx(gdImage.getCPtr(image), file_name, fg, SWIGTYPE_p_gdIOCtx.getCPtr(arg3));
  }

  public static gdImage gdImageCreateFromXpm(string filename) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreateFromXpm(filename);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static void gdImageDestroy(gdImage im) {
    libgdPINVOKE.gdImageDestroy(gdImage.getCPtr(im));
  }

  public static void gdImageSetPixel(gdImage im, int x, int y, int color) {
    libgdPINVOKE.gdImageSetPixel(gdImage.getCPtr(im), x, y, color);
  }

  public static int gdImageGetPixel(gdImage im, int x, int y) {
    int ret = libgdPINVOKE.gdImageGetPixel(gdImage.getCPtr(im), x, y);
    return ret;
  }

  public static int gdImageGetTrueColorPixel(gdImage im, int x, int y) {
    int ret = libgdPINVOKE.gdImageGetTrueColorPixel(gdImage.getCPtr(im), x, y);
    return ret;
  }

  public static void gdImageAABlend(gdImage im) {
    libgdPINVOKE.gdImageAABlend(gdImage.getCPtr(im));
  }

  public static void gdImageLine(gdImage im, int x1, int y1, int x2, int y2, int color) {
    libgdPINVOKE.gdImageLine(gdImage.getCPtr(im), x1, y1, x2, y2, color);
  }

  public static void gdImageDashedLine(gdImage im, int x1, int y1, int x2, int y2, int color) {
    libgdPINVOKE.gdImageDashedLine(gdImage.getCPtr(im), x1, y1, x2, y2, color);
  }

  public static void gdImageRectangle(gdImage im, int x1, int y1, int x2, int y2, int color) {
    libgdPINVOKE.gdImageRectangle(gdImage.getCPtr(im), x1, y1, x2, y2, color);
  }

  public static void gdImageFilledRectangle(gdImage im, int x1, int y1, int x2, int y2, int color) {
    libgdPINVOKE.gdImageFilledRectangle(gdImage.getCPtr(im), x1, y1, x2, y2, color);
  }

  public static void gdImageSetClip(gdImage im, int x1, int y1, int x2, int y2) {
    libgdPINVOKE.gdImageSetClip(gdImage.getCPtr(im), x1, y1, x2, y2);
  }

  public static void gdImageGetClip(gdImage im, SWIGTYPE_p_int x1P, SWIGTYPE_p_int y1P, SWIGTYPE_p_int x2P, SWIGTYPE_p_int y2P) {
    libgdPINVOKE.gdImageGetClip(gdImage.getCPtr(im), SWIGTYPE_p_int.getCPtr(x1P), SWIGTYPE_p_int.getCPtr(y1P), SWIGTYPE_p_int.getCPtr(x2P), SWIGTYPE_p_int.getCPtr(y2P));
  }

  public static void gdImageSetResolution(gdImage im, uint res_x, uint res_y) {
    libgdPINVOKE.gdImageSetResolution(gdImage.getCPtr(im), res_x, res_y);
  }

  public static int gdImageBoundsSafe(gdImage im, int x, int y) {
    int ret = libgdPINVOKE.gdImageBoundsSafe(gdImage.getCPtr(im), x, y);
    return ret;
  }

  public static void gdImageChar(gdImage im, gdFont f, int x, int y, int c, int color) {
    libgdPINVOKE.gdImageChar(gdImage.getCPtr(im), gdFont.getCPtr(f), x, y, c, color);
  }

  public static void gdImageCharUp(gdImage im, gdFont f, int x, int y, int c, int color) {
    libgdPINVOKE.gdImageCharUp(gdImage.getCPtr(im), gdFont.getCPtr(f), x, y, c, color);
  }

  public static void gdImageString(gdImage im, gdFont f, int x, int y, SWIGTYPE_p_unsigned_char s, int color) {
    libgdPINVOKE.gdImageString(gdImage.getCPtr(im), gdFont.getCPtr(f), x, y, SWIGTYPE_p_unsigned_char.getCPtr(s), color);
  }

  public static void gdImageStringUp(gdImage im, gdFont f, int x, int y, SWIGTYPE_p_unsigned_char s, int color) {
    libgdPINVOKE.gdImageStringUp(gdImage.getCPtr(im), gdFont.getCPtr(f), x, y, SWIGTYPE_p_unsigned_char.getCPtr(s), color);
  }

  public static void gdImageString16(gdImage im, gdFont f, int x, int y, SWIGTYPE_p_unsigned_short s, int color) {
    libgdPINVOKE.gdImageString16(gdImage.getCPtr(im), gdFont.getCPtr(f), x, y, SWIGTYPE_p_unsigned_short.getCPtr(s), color);
  }

  public static void gdImageStringUp16(gdImage im, gdFont f, int x, int y, SWIGTYPE_p_unsigned_short s, int color) {
    libgdPINVOKE.gdImageStringUp16(gdImage.getCPtr(im), gdFont.getCPtr(f), x, y, SWIGTYPE_p_unsigned_short.getCPtr(s), color);
  }

  public static int gdFontCacheSetup() {
    int ret = libgdPINVOKE.gdFontCacheSetup();
    return ret;
  }

  public static void gdFontCacheShutdown() {
    libgdPINVOKE.gdFontCacheShutdown();
  }

  public static void gdFreeFontCache() {
    libgdPINVOKE.gdFreeFontCache();
  }

  public static string gdImageStringTTF(gdImage im, SWIGTYPE_p_int brect, int fg, string fontlist, double ptsize, double angle, int x, int y, string arg8) {
    string ret = libgdPINVOKE.gdImageStringTTF(gdImage.getCPtr(im), SWIGTYPE_p_int.getCPtr(brect), fg, fontlist, ptsize, angle, x, y, arg8);
    return ret;
  }

  public static string gdImageStringFT(gdImage im, SWIGTYPE_p_int brect, int fg, string fontlist, double ptsize, double angle, int x, int y, string arg8) {
    string ret = libgdPINVOKE.gdImageStringFT(gdImage.getCPtr(im), SWIGTYPE_p_int.getCPtr(brect), fg, fontlist, ptsize, angle, x, y, arg8);
    return ret;
  }

  public static int gdFTUseFontConfig(int flag) {
    int ret = libgdPINVOKE.gdFTUseFontConfig(flag);
    return ret;
  }

  public static string gdImageStringFTEx(gdImage im, SWIGTYPE_p_int brect, int fg, string fontlist, double ptsize, double angle, int x, int y, string arg8, SWIGTYPE_p_gdFTStringExtraPtr strex) {
    string ret = libgdPINVOKE.gdImageStringFTEx(gdImage.getCPtr(im), SWIGTYPE_p_int.getCPtr(brect), fg, fontlist, ptsize, angle, x, y, arg8, SWIGTYPE_p_gdFTStringExtraPtr.getCPtr(strex));
    if (libgdPINVOKE.SWIGPendingException.Pending) throw libgdPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void gdImagePolygon(gdImage im, SWIGTYPE_p_gdPointPtr p, int n, int c) {
    libgdPINVOKE.gdImagePolygon(gdImage.getCPtr(im), SWIGTYPE_p_gdPointPtr.getCPtr(p), n, c);
    if (libgdPINVOKE.SWIGPendingException.Pending) throw libgdPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void gdImageOpenPolygon(gdImage im, SWIGTYPE_p_gdPointPtr p, int n, int c) {
    libgdPINVOKE.gdImageOpenPolygon(gdImage.getCPtr(im), SWIGTYPE_p_gdPointPtr.getCPtr(p), n, c);
    if (libgdPINVOKE.SWIGPendingException.Pending) throw libgdPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void gdImageFilledPolygon(gdImage im, SWIGTYPE_p_gdPointPtr p, int n, int c) {
    libgdPINVOKE.gdImageFilledPolygon(gdImage.getCPtr(im), SWIGTYPE_p_gdPointPtr.getCPtr(p), n, c);
    if (libgdPINVOKE.SWIGPendingException.Pending) throw libgdPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int gdImageColorAllocate(gdImage im, int r, int g, int b) {
    int ret = libgdPINVOKE.gdImageColorAllocate(gdImage.getCPtr(im), r, g, b);
    return ret;
  }

  public static int gdImageColorAllocateAlpha(gdImage im, int r, int g, int b, int a) {
    int ret = libgdPINVOKE.gdImageColorAllocateAlpha(gdImage.getCPtr(im), r, g, b, a);
    return ret;
  }

  public static int gdImageColorClosest(gdImage im, int r, int g, int b) {
    int ret = libgdPINVOKE.gdImageColorClosest(gdImage.getCPtr(im), r, g, b);
    return ret;
  }

  public static int gdImageColorClosestAlpha(gdImage im, int r, int g, int b, int a) {
    int ret = libgdPINVOKE.gdImageColorClosestAlpha(gdImage.getCPtr(im), r, g, b, a);
    return ret;
  }

  public static int gdImageColorClosestHWB(gdImage im, int r, int g, int b) {
    int ret = libgdPINVOKE.gdImageColorClosestHWB(gdImage.getCPtr(im), r, g, b);
    return ret;
  }

  public static int gdImageColorExact(gdImage im, int r, int g, int b) {
    int ret = libgdPINVOKE.gdImageColorExact(gdImage.getCPtr(im), r, g, b);
    return ret;
  }

  public static int gdImageColorExactAlpha(gdImage im, int r, int g, int b, int a) {
    int ret = libgdPINVOKE.gdImageColorExactAlpha(gdImage.getCPtr(im), r, g, b, a);
    return ret;
  }

  public static int gdImageColorResolve(gdImage im, int r, int g, int b) {
    int ret = libgdPINVOKE.gdImageColorResolve(gdImage.getCPtr(im), r, g, b);
    return ret;
  }

  public static int gdImageColorResolveAlpha(gdImage im, int r, int g, int b, int a) {
    int ret = libgdPINVOKE.gdImageColorResolveAlpha(gdImage.getCPtr(im), r, g, b, a);
    return ret;
  }

  public static void gdImageColorDeallocate(gdImage im, int color) {
    libgdPINVOKE.gdImageColorDeallocate(gdImage.getCPtr(im), color);
  }

  public static gdImage gdImageCreatePaletteFromTrueColor(gdImage im, int ditherFlag, int colorsWanted) {
    IntPtr cPtr = libgdPINVOKE.gdImageCreatePaletteFromTrueColor(gdImage.getCPtr(im), ditherFlag, colorsWanted);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static int gdImageTrueColorToPalette(gdImage im, int ditherFlag, int colorsWanted) {
    int ret = libgdPINVOKE.gdImageTrueColorToPalette(gdImage.getCPtr(im), ditherFlag, colorsWanted);
    return ret;
  }

  public static int gdImagePaletteToTrueColor(gdImage src) {
    int ret = libgdPINVOKE.gdImagePaletteToTrueColor(gdImage.getCPtr(src));
    return ret;
  }

  public static int gdImageColorMatch(gdImage im1, gdImage im2) {
    int ret = libgdPINVOKE.gdImageColorMatch(gdImage.getCPtr(im1), gdImage.getCPtr(im2));
    return ret;
  }

  public static int gdImageTrueColorToPaletteSetMethod(gdImage im, int method, int speed) {
    int ret = libgdPINVOKE.gdImageTrueColorToPaletteSetMethod(gdImage.getCPtr(im), method, speed);
    return ret;
  }

  public static void gdImageTrueColorToPaletteSetQuality(gdImage im, int min_quality, int max_quality) {
    libgdPINVOKE.gdImageTrueColorToPaletteSetQuality(gdImage.getCPtr(im), min_quality, max_quality);
  }

  public static void gdImageColorTransparent(gdImage im, int color) {
    libgdPINVOKE.gdImageColorTransparent(gdImage.getCPtr(im), color);
  }

  public static void gdImagePaletteCopy(gdImage dst, gdImage src) {
    libgdPINVOKE.gdImagePaletteCopy(gdImage.getCPtr(dst), gdImage.getCPtr(src));
  }

  public static int gdImageColorReplace(gdImage im, int src, int dst) {
    int ret = libgdPINVOKE.gdImageColorReplace(gdImage.getCPtr(im), src, dst);
    return ret;
  }

  public static int gdImageColorReplaceThreshold(gdImage im, int src, int dst, float threshold) {
    int ret = libgdPINVOKE.gdImageColorReplaceThreshold(gdImage.getCPtr(im), src, dst, threshold);
    return ret;
  }

  public static int gdImageColorReplaceArray(gdImage im, int len, SWIGTYPE_p_int src, SWIGTYPE_p_int dst) {
    int ret = libgdPINVOKE.gdImageColorReplaceArray(gdImage.getCPtr(im), len, SWIGTYPE_p_int.getCPtr(src), SWIGTYPE_p_int.getCPtr(dst));
    return ret;
  }

  public static int gdImageColorReplaceCallback(gdImage im, SWIGTYPE_p_f_p_struct_gdImageStruct_int__int callback) {
    int ret = libgdPINVOKE.gdImageColorReplaceCallback(gdImage.getCPtr(im), SWIGTYPE_p_f_p_struct_gdImageStruct_int__int.getCPtr(callback));
    return ret;
  }

  public static void gdImageGif(gdImage im, SWIGTYPE_p_FILE arg1) {
    libgdPINVOKE.gdImageGif(gdImage.getCPtr(im), SWIGTYPE_p_FILE.getCPtr(arg1));
  }

  public static void gdImagePng(gdImage im, SWIGTYPE_p_FILE arg1) {
    libgdPINVOKE.gdImagePng(gdImage.getCPtr(im), SWIGTYPE_p_FILE.getCPtr(arg1));
  }

  public static void gdImagePngCtx(gdImage im, SWIGTYPE_p_gdIOCtx arg1) {
    libgdPINVOKE.gdImagePngCtx(gdImage.getCPtr(im), SWIGTYPE_p_gdIOCtx.getCPtr(arg1));
  }

  public static void gdImageGifCtx(gdImage im, SWIGTYPE_p_gdIOCtx arg1) {
    libgdPINVOKE.gdImageGifCtx(gdImage.getCPtr(im), SWIGTYPE_p_gdIOCtx.getCPtr(arg1));
  }

  public static void gdImageTiff(gdImage im, SWIGTYPE_p_FILE outFile) {
    libgdPINVOKE.gdImageTiff(gdImage.getCPtr(im), SWIGTYPE_p_FILE.getCPtr(outFile));
  }

  public static SWIGTYPE_p_void gdImageTiffPtr(gdImage im, SWIGTYPE_p_int size) {
    IntPtr cPtr = libgdPINVOKE.gdImageTiffPtr(gdImage.getCPtr(im), SWIGTYPE_p_int.getCPtr(size));
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static void gdImageTiffCtx(gdImage image, SWIGTYPE_p_gdIOCtx arg1) {
    libgdPINVOKE.gdImageTiffCtx(gdImage.getCPtr(image), SWIGTYPE_p_gdIOCtx.getCPtr(arg1));
  }

  public static SWIGTYPE_p_void gdImageBmpPtr(gdImage im, SWIGTYPE_p_int size, int compression) {
    IntPtr cPtr = libgdPINVOKE.gdImageBmpPtr(gdImage.getCPtr(im), SWIGTYPE_p_int.getCPtr(size), compression);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static void gdImageBmp(gdImage im, SWIGTYPE_p_FILE outFile, int compression) {
    libgdPINVOKE.gdImageBmp(gdImage.getCPtr(im), SWIGTYPE_p_FILE.getCPtr(outFile), compression);
  }

  public static void gdImageBmpCtx(gdImage im, SWIGTYPE_p_gdIOCtxPtr arg1, int compression) {
    libgdPINVOKE.gdImageBmpCtx(gdImage.getCPtr(im), SWIGTYPE_p_gdIOCtxPtr.getCPtr(arg1), compression);
    if (libgdPINVOKE.SWIGPendingException.Pending) throw libgdPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void gdImagePngEx(gdImage im, SWIGTYPE_p_FILE arg1, int level) {
    libgdPINVOKE.gdImagePngEx(gdImage.getCPtr(im), SWIGTYPE_p_FILE.getCPtr(arg1), level);
  }

  public static void gdImagePngCtxEx(gdImage im, SWIGTYPE_p_gdIOCtx arg1, int level) {
    libgdPINVOKE.gdImagePngCtxEx(gdImage.getCPtr(im), SWIGTYPE_p_gdIOCtx.getCPtr(arg1), level);
  }

  public static void gdImageWBMP(gdImage image, int fg, SWIGTYPE_p_FILE arg2) {
    libgdPINVOKE.gdImageWBMP(gdImage.getCPtr(image), fg, SWIGTYPE_p_FILE.getCPtr(arg2));
  }

  public static void gdImageWBMPCtx(gdImage image, int fg, SWIGTYPE_p_gdIOCtx arg2) {
    libgdPINVOKE.gdImageWBMPCtx(gdImage.getCPtr(image), fg, SWIGTYPE_p_gdIOCtx.getCPtr(arg2));
  }

  public static void gdFree(SWIGTYPE_p_void m) {
    libgdPINVOKE.gdFree(SWIGTYPE_p_void.getCPtr(m));
  }

  public static SWIGTYPE_p_void gdImageWBMPPtr(gdImage im, SWIGTYPE_p_int size, int fg) {
    IntPtr cPtr = libgdPINVOKE.gdImageWBMPPtr(gdImage.getCPtr(im), SWIGTYPE_p_int.getCPtr(size), fg);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static void gdImageJpeg(gdImage im, SWIGTYPE_p_FILE arg1, int quality) {
    libgdPINVOKE.gdImageJpeg(gdImage.getCPtr(im), SWIGTYPE_p_FILE.getCPtr(arg1), quality);
  }

  public static void gdImageJpegCtx(gdImage im, SWIGTYPE_p_gdIOCtx arg1, int quality) {
    libgdPINVOKE.gdImageJpegCtx(gdImage.getCPtr(im), SWIGTYPE_p_gdIOCtx.getCPtr(arg1), quality);
  }

  public static SWIGTYPE_p_void gdImageJpegPtr(gdImage im, SWIGTYPE_p_int size, int quality) {
    IntPtr cPtr = libgdPINVOKE.gdImageJpegPtr(gdImage.getCPtr(im), SWIGTYPE_p_int.getCPtr(size), quality);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static void gdImageWebpEx(gdImage im, SWIGTYPE_p_FILE outFile, int quantization) {
    libgdPINVOKE.gdImageWebpEx(gdImage.getCPtr(im), SWIGTYPE_p_FILE.getCPtr(outFile), quantization);
  }

  public static void gdImageWebp(gdImage im, SWIGTYPE_p_FILE outFile) {
    libgdPINVOKE.gdImageWebp(gdImage.getCPtr(im), SWIGTYPE_p_FILE.getCPtr(outFile));
  }

  public static SWIGTYPE_p_void gdImageWebpPtr(gdImage im, SWIGTYPE_p_int size) {
    IntPtr cPtr = libgdPINVOKE.gdImageWebpPtr(gdImage.getCPtr(im), SWIGTYPE_p_int.getCPtr(size));
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void gdImageWebpPtrEx(gdImage im, SWIGTYPE_p_int size, int quantization) {
    IntPtr cPtr = libgdPINVOKE.gdImageWebpPtrEx(gdImage.getCPtr(im), SWIGTYPE_p_int.getCPtr(size), quantization);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static void gdImageWebpCtx(gdImage im, SWIGTYPE_p_gdIOCtx outfile, int quantization) {
    libgdPINVOKE.gdImageWebpCtx(gdImage.getCPtr(im), SWIGTYPE_p_gdIOCtx.getCPtr(outfile), quantization);
  }

  public static void gdImageGifAnimBegin(gdImage im, SWIGTYPE_p_FILE outFile, int GlobalCM, int Loops) {
    libgdPINVOKE.gdImageGifAnimBegin(gdImage.getCPtr(im), SWIGTYPE_p_FILE.getCPtr(outFile), GlobalCM, Loops);
  }

  public static void gdImageGifAnimAdd(gdImage im, SWIGTYPE_p_FILE outFile, int LocalCM, int LeftOfs, int TopOfs, int Delay, int Disposal, gdImage previm) {
    libgdPINVOKE.gdImageGifAnimAdd(gdImage.getCPtr(im), SWIGTYPE_p_FILE.getCPtr(outFile), LocalCM, LeftOfs, TopOfs, Delay, Disposal, gdImage.getCPtr(previm));
  }

  public static void gdImageGifAnimEnd(SWIGTYPE_p_FILE outFile) {
    libgdPINVOKE.gdImageGifAnimEnd(SWIGTYPE_p_FILE.getCPtr(outFile));
  }

  public static void gdImageGifAnimBeginCtx(gdImage im, SWIGTYPE_p_gdIOCtx arg1, int GlobalCM, int Loops) {
    libgdPINVOKE.gdImageGifAnimBeginCtx(gdImage.getCPtr(im), SWIGTYPE_p_gdIOCtx.getCPtr(arg1), GlobalCM, Loops);
  }

  public static void gdImageGifAnimAddCtx(gdImage im, SWIGTYPE_p_gdIOCtx arg1, int LocalCM, int LeftOfs, int TopOfs, int Delay, int Disposal, gdImage previm) {
    libgdPINVOKE.gdImageGifAnimAddCtx(gdImage.getCPtr(im), SWIGTYPE_p_gdIOCtx.getCPtr(arg1), LocalCM, LeftOfs, TopOfs, Delay, Disposal, gdImage.getCPtr(previm));
  }

  public static void gdImageGifAnimEndCtx(SWIGTYPE_p_gdIOCtx arg0) {
    libgdPINVOKE.gdImageGifAnimEndCtx(SWIGTYPE_p_gdIOCtx.getCPtr(arg0));
  }

  public static SWIGTYPE_p_void gdImageGifAnimBeginPtr(gdImage im, SWIGTYPE_p_int size, int GlobalCM, int Loops) {
    IntPtr cPtr = libgdPINVOKE.gdImageGifAnimBeginPtr(gdImage.getCPtr(im), SWIGTYPE_p_int.getCPtr(size), GlobalCM, Loops);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void gdImageGifAnimAddPtr(gdImage im, SWIGTYPE_p_int size, int LocalCM, int LeftOfs, int TopOfs, int Delay, int Disposal, gdImage previm) {
    IntPtr cPtr = libgdPINVOKE.gdImageGifAnimAddPtr(gdImage.getCPtr(im), SWIGTYPE_p_int.getCPtr(size), LocalCM, LeftOfs, TopOfs, Delay, Disposal, gdImage.getCPtr(previm));
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void gdImageGifAnimEndPtr(SWIGTYPE_p_int size) {
    IntPtr cPtr = libgdPINVOKE.gdImageGifAnimEndPtr(SWIGTYPE_p_int.getCPtr(size));
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static void gdImagePngToSink(gdImage im, SWIGTYPE_p_gdSinkPtr arg1) {
    libgdPINVOKE.gdImagePngToSink(gdImage.getCPtr(im), SWIGTYPE_p_gdSinkPtr.getCPtr(arg1));
    if (libgdPINVOKE.SWIGPendingException.Pending) throw libgdPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void gdImageGd(gdImage im, SWIGTYPE_p_FILE arg1) {
    libgdPINVOKE.gdImageGd(gdImage.getCPtr(im), SWIGTYPE_p_FILE.getCPtr(arg1));
  }

  public static void gdImageGd2(gdImage im, SWIGTYPE_p_FILE arg1, int cs, int fmt) {
    libgdPINVOKE.gdImageGd2(gdImage.getCPtr(im), SWIGTYPE_p_FILE.getCPtr(arg1), cs, fmt);
  }

  public static SWIGTYPE_p_void gdImageGifPtr(gdImage im, SWIGTYPE_p_int size) {
    IntPtr cPtr = libgdPINVOKE.gdImageGifPtr(gdImage.getCPtr(im), SWIGTYPE_p_int.getCPtr(size));
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void gdImagePngPtr(gdImage im, SWIGTYPE_p_int size) {
    IntPtr cPtr = libgdPINVOKE.gdImagePngPtr(gdImage.getCPtr(im), SWIGTYPE_p_int.getCPtr(size));
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void gdImagePngPtrEx(gdImage im, SWIGTYPE_p_int size, int level) {
    IntPtr cPtr = libgdPINVOKE.gdImagePngPtrEx(gdImage.getCPtr(im), SWIGTYPE_p_int.getCPtr(size), level);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void gdImageGdPtr(gdImage im, SWIGTYPE_p_int size) {
    IntPtr cPtr = libgdPINVOKE.gdImageGdPtr(gdImage.getCPtr(im), SWIGTYPE_p_int.getCPtr(size));
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void gdImageGd2Ptr(gdImage im, int cs, int fmt, SWIGTYPE_p_int size) {
    IntPtr cPtr = libgdPINVOKE.gdImageGd2Ptr(gdImage.getCPtr(im), cs, fmt, SWIGTYPE_p_int.getCPtr(size));
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static void gdImageFilledArc(gdImage im, int cx, int cy, int w, int h, int s, int e, int color, int style) {
    libgdPINVOKE.gdImageFilledArc(gdImage.getCPtr(im), cx, cy, w, h, s, e, color, style);
  }

  public static void gdImageArc(gdImage im, int cx, int cy, int w, int h, int s, int e, int color) {
    libgdPINVOKE.gdImageArc(gdImage.getCPtr(im), cx, cy, w, h, s, e, color);
  }

  public static void gdImageEllipse(gdImage im, int cx, int cy, int w, int h, int color) {
    libgdPINVOKE.gdImageEllipse(gdImage.getCPtr(im), cx, cy, w, h, color);
  }

  public static void gdImageFilledEllipse(gdImage im, int cx, int cy, int w, int h, int color) {
    libgdPINVOKE.gdImageFilledEllipse(gdImage.getCPtr(im), cx, cy, w, h, color);
  }

  public static void gdImageFillToBorder(gdImage im, int x, int y, int border, int color) {
    libgdPINVOKE.gdImageFillToBorder(gdImage.getCPtr(im), x, y, border, color);
  }

  public static void gdImageFill(gdImage im, int x, int y, int color) {
    libgdPINVOKE.gdImageFill(gdImage.getCPtr(im), x, y, color);
  }

  public static void gdImageCopy(gdImage dst, gdImage src, int dstX, int dstY, int srcX, int srcY, int w, int h) {
    libgdPINVOKE.gdImageCopy(gdImage.getCPtr(dst), gdImage.getCPtr(src), dstX, dstY, srcX, srcY, w, h);
  }

  public static void gdImageCopyMerge(gdImage dst, gdImage src, int dstX, int dstY, int srcX, int srcY, int w, int h, int pct) {
    libgdPINVOKE.gdImageCopyMerge(gdImage.getCPtr(dst), gdImage.getCPtr(src), dstX, dstY, srcX, srcY, w, h, pct);
  }

  public static void gdImageCopyMergeGray(gdImage dst, gdImage src, int dstX, int dstY, int srcX, int srcY, int w, int h, int pct) {
    libgdPINVOKE.gdImageCopyMergeGray(gdImage.getCPtr(dst), gdImage.getCPtr(src), dstX, dstY, srcX, srcY, w, h, pct);
  }

  public static void gdImageCopyResized(gdImage dst, gdImage src, int dstX, int dstY, int srcX, int srcY, int dstW, int dstH, int srcW, int srcH) {
    libgdPINVOKE.gdImageCopyResized(gdImage.getCPtr(dst), gdImage.getCPtr(src), dstX, dstY, srcX, srcY, dstW, dstH, srcW, srcH);
  }

  public static void gdImageCopyResampled(gdImage dst, gdImage src, int dstX, int dstY, int srcX, int srcY, int dstW, int dstH, int srcW, int srcH) {
    libgdPINVOKE.gdImageCopyResampled(gdImage.getCPtr(dst), gdImage.getCPtr(src), dstX, dstY, srcX, srcY, dstW, dstH, srcW, srcH);
  }

  public static void gdImageCopyRotated(gdImage dst, gdImage src, double dstX, double dstY, int srcX, int srcY, int srcWidth, int srcHeight, int angle) {
    libgdPINVOKE.gdImageCopyRotated(gdImage.getCPtr(dst), gdImage.getCPtr(src), dstX, dstY, srcX, srcY, srcWidth, srcHeight, angle);
  }

  public static gdImage gdImageClone(gdImage src) {
    IntPtr cPtr = libgdPINVOKE.gdImageClone(gdImage.getCPtr(src));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static void gdImageSetBrush(gdImage im, gdImage brush) {
    libgdPINVOKE.gdImageSetBrush(gdImage.getCPtr(im), gdImage.getCPtr(brush));
  }

  public static void gdImageSetTile(gdImage im, gdImage tile) {
    libgdPINVOKE.gdImageSetTile(gdImage.getCPtr(im), gdImage.getCPtr(tile));
  }

  public static void gdImageSetAntiAliased(gdImage im, int c) {
    libgdPINVOKE.gdImageSetAntiAliased(gdImage.getCPtr(im), c);
  }

  public static void gdImageSetAntiAliasedDontBlend(gdImage im, int c, int dont_blend) {
    libgdPINVOKE.gdImageSetAntiAliasedDontBlend(gdImage.getCPtr(im), c, dont_blend);
  }

  public static void gdImageSetStyle(gdImage im, SWIGTYPE_p_int style, int noOfPixels) {
    libgdPINVOKE.gdImageSetStyle(gdImage.getCPtr(im), SWIGTYPE_p_int.getCPtr(style), noOfPixels);
  }

  public static void gdImageSetThickness(gdImage im, int thickness) {
    libgdPINVOKE.gdImageSetThickness(gdImage.getCPtr(im), thickness);
  }

  public static void gdImageInterlace(gdImage im, int interlaceArg) {
    libgdPINVOKE.gdImageInterlace(gdImage.getCPtr(im), interlaceArg);
  }

  public static void gdImageAlphaBlending(gdImage im, int alphaBlendingArg) {
    libgdPINVOKE.gdImageAlphaBlending(gdImage.getCPtr(im), alphaBlendingArg);
  }

  public static void gdImageSaveAlpha(gdImage im, int saveAlphaArg) {
    libgdPINVOKE.gdImageSaveAlpha(gdImage.getCPtr(im), saveAlphaArg);
  }

  public static gdImage gdImageNeuQuant(gdImage im, int max_color, int sample_factor) {
    IntPtr cPtr = libgdPINVOKE.gdImageNeuQuant(gdImage.getCPtr(im), max_color, sample_factor);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static int gdImagePixelate(gdImage im, int block_size, uint mode) {
    int ret = libgdPINVOKE.gdImagePixelate(gdImage.getCPtr(im), block_size, mode);
    return ret;
  }

  public static int gdImageScatter(gdImage im, int sub, int plus) {
    int ret = libgdPINVOKE.gdImageScatter(gdImage.getCPtr(im), sub, plus);
    return ret;
  }

  public static int gdImageScatterColor(gdImage im, int sub, int plus, SWIGTYPE_p_int colors, uint num_colors) {
    int ret = libgdPINVOKE.gdImageScatterColor(gdImage.getCPtr(im), sub, plus, SWIGTYPE_p_int.getCPtr(colors), num_colors);
    return ret;
  }

  public static int gdImageScatterEx(gdImage im, SWIGTYPE_p_gdScatterPtr s) {
    int ret = libgdPINVOKE.gdImageScatterEx(gdImage.getCPtr(im), SWIGTYPE_p_gdScatterPtr.getCPtr(s));
    if (libgdPINVOKE.SWIGPendingException.Pending) throw libgdPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int gdImageSmooth(gdImage im, float weight) {
    int ret = libgdPINVOKE.gdImageSmooth(gdImage.getCPtr(im), weight);
    return ret;
  }

  public static int gdImageMeanRemoval(gdImage im) {
    int ret = libgdPINVOKE.gdImageMeanRemoval(gdImage.getCPtr(im));
    return ret;
  }

  public static int gdImageEmboss(gdImage im) {
    int ret = libgdPINVOKE.gdImageEmboss(gdImage.getCPtr(im));
    return ret;
  }

  public static int gdImageGaussianBlur(gdImage im) {
    int ret = libgdPINVOKE.gdImageGaussianBlur(gdImage.getCPtr(im));
    return ret;
  }

  public static int gdImageEdgeDetectQuick(gdImage src) {
    int ret = libgdPINVOKE.gdImageEdgeDetectQuick(gdImage.getCPtr(src));
    return ret;
  }

  public static int gdImageSelectiveBlur(gdImage src) {
    int ret = libgdPINVOKE.gdImageSelectiveBlur(gdImage.getCPtr(src));
    return ret;
  }

  public static int gdImageConvolution(gdImage src, SWIGTYPE_p_a_3__float filter, float filter_div, float offset) {
    int ret = libgdPINVOKE.gdImageConvolution(gdImage.getCPtr(src), SWIGTYPE_p_a_3__float.getCPtr(filter), filter_div, offset);
    return ret;
  }

  public static int gdImageColor(gdImage src, int red, int green, int blue, int alpha) {
    int ret = libgdPINVOKE.gdImageColor(gdImage.getCPtr(src), red, green, blue, alpha);
    return ret;
  }

  public static int gdImageContrast(gdImage src, double contrast) {
    int ret = libgdPINVOKE.gdImageContrast(gdImage.getCPtr(src), contrast);
    return ret;
  }

  public static int gdImageBrightness(gdImage src, int brightness) {
    int ret = libgdPINVOKE.gdImageBrightness(gdImage.getCPtr(src), brightness);
    return ret;
  }

  public static int gdImageGrayScale(gdImage src) {
    int ret = libgdPINVOKE.gdImageGrayScale(gdImage.getCPtr(src));
    return ret;
  }

  public static int gdImageNegate(gdImage src) {
    int ret = libgdPINVOKE.gdImageNegate(gdImage.getCPtr(src));
    return ret;
  }

  public static SWIGTYPE_p_gdIOCtx gdNewFileCtx(SWIGTYPE_p_FILE arg0) {
    IntPtr cPtr = libgdPINVOKE.gdNewFileCtx(SWIGTYPE_p_FILE.getCPtr(arg0));
    SWIGTYPE_p_gdIOCtx ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_gdIOCtx(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_gdIOCtx gdNewDynamicCtx(int size, SWIGTYPE_p_void data) {
    IntPtr cPtr = libgdPINVOKE.gdNewDynamicCtx(size, SWIGTYPE_p_void.getCPtr(data));
    SWIGTYPE_p_gdIOCtx ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_gdIOCtx(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_gdIOCtx gdNewDynamicCtxEx(int size, SWIGTYPE_p_void data, int freeFlag) {
    IntPtr cPtr = libgdPINVOKE.gdNewDynamicCtxEx(size, SWIGTYPE_p_void.getCPtr(data), freeFlag);
    SWIGTYPE_p_gdIOCtx ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_gdIOCtx(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_gdIOCtx gdNewSSCtx(SWIGTYPE_p_gdSourcePtr arg0, SWIGTYPE_p_gdSinkPtr arg1) {
    IntPtr cPtr = libgdPINVOKE.gdNewSSCtx(SWIGTYPE_p_gdSourcePtr.getCPtr(arg0), SWIGTYPE_p_gdSinkPtr.getCPtr(arg1));
    SWIGTYPE_p_gdIOCtx ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_gdIOCtx(cPtr, false);
    if (libgdPINVOKE.SWIGPendingException.Pending) throw libgdPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void gdDPExtractData(SWIGTYPE_p_gdIOCtx ctx, SWIGTYPE_p_int size) {
    IntPtr cPtr = libgdPINVOKE.gdDPExtractData(SWIGTYPE_p_gdIOCtx.getCPtr(ctx), SWIGTYPE_p_int.getCPtr(size));
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static int gdImageCompare(gdImage im1, gdImage im2) {
    int ret = libgdPINVOKE.gdImageCompare(gdImage.getCPtr(im1), gdImage.getCPtr(im2));
    return ret;
  }

  public static void gdImageFlipHorizontal(gdImage im) {
    libgdPINVOKE.gdImageFlipHorizontal(gdImage.getCPtr(im));
  }

  public static void gdImageFlipVertical(gdImage im) {
    libgdPINVOKE.gdImageFlipVertical(gdImage.getCPtr(im));
  }

  public static void gdImageFlipBoth(gdImage im) {
    libgdPINVOKE.gdImageFlipBoth(gdImage.getCPtr(im));
  }

  public static gdImage gdImageCrop(gdImage src, gdRect crop) {
    IntPtr cPtr = libgdPINVOKE.gdImageCrop(gdImage.getCPtr(src), gdRect.getCPtr(crop));
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCropAuto(gdImage im, uint mode) {
    IntPtr cPtr = libgdPINVOKE.gdImageCropAuto(gdImage.getCPtr(im), mode);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageCropThreshold(gdImage im, uint color, float threshold) {
    IntPtr cPtr = libgdPINVOKE.gdImageCropThreshold(gdImage.getCPtr(im), color, threshold);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static int gdImageSetInterpolationMethod(gdImage im, gdInterpolationMethod id) {
    int ret = libgdPINVOKE.gdImageSetInterpolationMethod(gdImage.getCPtr(im), (int)id);
    return ret;
  }

  public static gdInterpolationMethod gdImageGetInterpolationMethod(gdImage im) {
    gdInterpolationMethod ret = (gdInterpolationMethod)libgdPINVOKE.gdImageGetInterpolationMethod(gdImage.getCPtr(im));
    return ret;
  }

  public static gdImage gdImageScaleBilinear(gdImage im, uint new_width, uint new_height) {
    IntPtr cPtr = libgdPINVOKE.gdImageScaleBilinear(gdImage.getCPtr(im), new_width, new_height);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageScaleBicubic(gdImage src_img, uint new_width, uint new_height) {
    IntPtr cPtr = libgdPINVOKE.gdImageScaleBicubic(gdImage.getCPtr(src_img), new_width, new_height);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageScaleBicubicFixed(gdImage src, uint width, uint height) {
    IntPtr cPtr = libgdPINVOKE.gdImageScaleBicubicFixed(gdImage.getCPtr(src), width, height);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageScaleNearestNeighbour(gdImage im, uint width, uint height) {
    IntPtr cPtr = libgdPINVOKE.gdImageScaleNearestNeighbour(gdImage.getCPtr(im), width, height);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageScale(gdImage src, uint new_width, uint new_height) {
    IntPtr cPtr = libgdPINVOKE.gdImageScale(gdImage.getCPtr(src), new_width, new_height);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageRotate90(gdImage src, int ignoretransparent) {
    IntPtr cPtr = libgdPINVOKE.gdImageRotate90(gdImage.getCPtr(src), ignoretransparent);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageRotate180(gdImage src, int ignoretransparent) {
    IntPtr cPtr = libgdPINVOKE.gdImageRotate180(gdImage.getCPtr(src), ignoretransparent);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageRotate270(gdImage src, int ignoretransparent) {
    IntPtr cPtr = libgdPINVOKE.gdImageRotate270(gdImage.getCPtr(src), ignoretransparent);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageRotateNearestNeighbour(gdImage src, float degrees, int bgColor) {
    IntPtr cPtr = libgdPINVOKE.gdImageRotateNearestNeighbour(gdImage.getCPtr(src), degrees, bgColor);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageRotateBilinear(gdImage src, float degrees, int bgColor) {
    IntPtr cPtr = libgdPINVOKE.gdImageRotateBilinear(gdImage.getCPtr(src), degrees, bgColor);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageRotateBicubicFixed(gdImage src, float degrees, int bgColor) {
    IntPtr cPtr = libgdPINVOKE.gdImageRotateBicubicFixed(gdImage.getCPtr(src), degrees, bgColor);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageRotateGeneric(gdImage src, float degrees, int bgColor) {
    IntPtr cPtr = libgdPINVOKE.gdImageRotateGeneric(gdImage.getCPtr(src), degrees, bgColor);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static gdImage gdImageRotateInterpolated(gdImage src, float angle, int bgcolor) {
    IntPtr cPtr = libgdPINVOKE.gdImageRotateInterpolated(gdImage.getCPtr(src), angle, bgcolor);
    gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
    return ret;
  }

  public static int gdAffineApplyToPointF(SWIGTYPE_p_gdPointFPtr dst, SWIGTYPE_p_gdPointFPtr src, SWIGTYPE_p_double affine) {
    int ret = libgdPINVOKE.gdAffineApplyToPointF(SWIGTYPE_p_gdPointFPtr.getCPtr(dst), SWIGTYPE_p_gdPointFPtr.getCPtr(src), SWIGTYPE_p_double.getCPtr(affine));
    if (libgdPINVOKE.SWIGPendingException.Pending) throw libgdPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int gdAffineInvert(SWIGTYPE_p_double dst, SWIGTYPE_p_double src) {
    int ret = libgdPINVOKE.gdAffineInvert(SWIGTYPE_p_double.getCPtr(dst), SWIGTYPE_p_double.getCPtr(src));
    return ret;
  }

  public static int gdAffineFlip(SWIGTYPE_p_double dst_affine, SWIGTYPE_p_double src_affine, int flip_h, int flip_v) {
    int ret = libgdPINVOKE.gdAffineFlip(SWIGTYPE_p_double.getCPtr(dst_affine), SWIGTYPE_p_double.getCPtr(src_affine), flip_h, flip_v);
    return ret;
  }

  public static int gdAffineConcat(SWIGTYPE_p_double dst, SWIGTYPE_p_double m1, SWIGTYPE_p_double m2) {
    int ret = libgdPINVOKE.gdAffineConcat(SWIGTYPE_p_double.getCPtr(dst), SWIGTYPE_p_double.getCPtr(m1), SWIGTYPE_p_double.getCPtr(m2));
    return ret;
  }

  public static int gdAffineIdentity(SWIGTYPE_p_double dst) {
    int ret = libgdPINVOKE.gdAffineIdentity(SWIGTYPE_p_double.getCPtr(dst));
    return ret;
  }

  public static int gdAffineScale(SWIGTYPE_p_double dst, double scale_x, double scale_y) {
    int ret = libgdPINVOKE.gdAffineScale(SWIGTYPE_p_double.getCPtr(dst), scale_x, scale_y);
    return ret;
  }

  public static int gdAffineRotate(SWIGTYPE_p_double dst, double angle) {
    int ret = libgdPINVOKE.gdAffineRotate(SWIGTYPE_p_double.getCPtr(dst), angle);
    return ret;
  }

  public static int gdAffineShearHorizontal(SWIGTYPE_p_double dst, double angle) {
    int ret = libgdPINVOKE.gdAffineShearHorizontal(SWIGTYPE_p_double.getCPtr(dst), angle);
    return ret;
  }

  public static int gdAffineShearVertical(SWIGTYPE_p_double dst, double angle) {
    int ret = libgdPINVOKE.gdAffineShearVertical(SWIGTYPE_p_double.getCPtr(dst), angle);
    return ret;
  }

  public static int gdAffineTranslate(SWIGTYPE_p_double dst, double offset_x, double offset_y) {
    int ret = libgdPINVOKE.gdAffineTranslate(SWIGTYPE_p_double.getCPtr(dst), offset_x, offset_y);
    return ret;
  }

  public static double gdAffineExpansion(SWIGTYPE_p_double src) {
    double ret = libgdPINVOKE.gdAffineExpansion(SWIGTYPE_p_double.getCPtr(src));
    return ret;
  }

  public static int gdAffineRectilinear(SWIGTYPE_p_double src) {
    int ret = libgdPINVOKE.gdAffineRectilinear(SWIGTYPE_p_double.getCPtr(src));
    return ret;
  }

  public static int gdAffineEqual(SWIGTYPE_p_double matrix1, SWIGTYPE_p_double matrix2) {
    int ret = libgdPINVOKE.gdAffineEqual(SWIGTYPE_p_double.getCPtr(matrix1), SWIGTYPE_p_double.getCPtr(matrix2));
    return ret;
  }

  public static int gdTransformAffineGetImage(SWIGTYPE_p_p_gdImageStruct dst, gdImage src, SWIGTYPE_p_gdRectPtr src_area, SWIGTYPE_p_double affine) {
    int ret = libgdPINVOKE.gdTransformAffineGetImage(SWIGTYPE_p_p_gdImageStruct.getCPtr(dst), gdImage.getCPtr(src), SWIGTYPE_p_gdRectPtr.getCPtr(src_area), SWIGTYPE_p_double.getCPtr(affine));
    if (libgdPINVOKE.SWIGPendingException.Pending) throw libgdPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int gdTransformAffineCopy(gdImage dst, int dst_x, int dst_y, gdImage src, SWIGTYPE_p_gdRectPtr src_region, SWIGTYPE_p_double affine) {
    int ret = libgdPINVOKE.gdTransformAffineCopy(gdImage.getCPtr(dst), dst_x, dst_y, gdImage.getCPtr(src), SWIGTYPE_p_gdRectPtr.getCPtr(src_region), SWIGTYPE_p_double.getCPtr(affine));
    if (libgdPINVOKE.SWIGPendingException.Pending) throw libgdPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int gdTransformAffineBoundingBox(SWIGTYPE_p_gdRectPtr src, SWIGTYPE_p_double affine, SWIGTYPE_p_gdRectPtr bbox) {
    int ret = libgdPINVOKE.gdTransformAffineBoundingBox(SWIGTYPE_p_gdRectPtr.getCPtr(src), SWIGTYPE_p_double.getCPtr(affine), SWIGTYPE_p_gdRectPtr.getCPtr(bbox));
    if (libgdPINVOKE.SWIGPendingException.Pending) throw libgdPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int gdMajorVersion() {
    int ret = libgdPINVOKE.gdMajorVersion();
    return ret;
  }

  public static int gdMinorVersion() {
    int ret = libgdPINVOKE.gdMinorVersion();
    return ret;
  }

  public static int gdReleaseVersion() {
    int ret = libgdPINVOKE.gdReleaseVersion();
    return ret;
  }

  public static string gdExtraVersion() {
    string ret = libgdPINVOKE.gdExtraVersion();
    return ret;
  }

  public static string gdVersionString() {
    string ret = libgdPINVOKE.gdVersionString();
    return ret;
  }

  public static readonly int GD_H = libgdPINVOKE.GD_H_get();
  public static readonly int GD_MAJOR_VERSION = libgdPINVOKE.GD_MAJOR_VERSION_get();
  public static readonly int GD_MINOR_VERSION = libgdPINVOKE.GD_MINOR_VERSION_get();
  public static readonly int GD_RELEASE_VERSION = libgdPINVOKE.GD_RELEASE_VERSION_get();
  public static readonly string GD_EXTRA_VERSION = libgdPINVOKE.GD_EXTRA_VERSION_get();
  public static readonly string GD_VERSION_STRING = libgdPINVOKE.GD_VERSION_STRING_get();
  public static readonly int gdMaxColors = libgdPINVOKE.gdMaxColors_get();
  public static readonly int gdAlphaMax = libgdPINVOKE.gdAlphaMax_get();
  public static readonly int gdAlphaOpaque = libgdPINVOKE.gdAlphaOpaque_get();
  public static readonly int gdAlphaTransparent = libgdPINVOKE.gdAlphaTransparent_get();
  public static readonly int gdRedMax = libgdPINVOKE.gdRedMax_get();
  public static readonly int gdGreenMax = libgdPINVOKE.gdGreenMax_get();
  public static readonly int gdBlueMax = libgdPINVOKE.gdBlueMax_get();
  public static readonly int gdEffectReplace = libgdPINVOKE.gdEffectReplace_get();
  public static readonly int gdEffectAlphaBlend = libgdPINVOKE.gdEffectAlphaBlend_get();
  public static readonly int gdEffectNormal = libgdPINVOKE.gdEffectNormal_get();
  public static readonly int gdEffectOverlay = libgdPINVOKE.gdEffectOverlay_get();
  public static readonly int GD_TRUE = libgdPINVOKE.GD_TRUE_get();
  public static readonly int GD_FALSE = libgdPINVOKE.GD_FALSE_get();
  public static readonly double GD_EPSILON = libgdPINVOKE.GD_EPSILON_get();
  public static readonly double M_PI = libgdPINVOKE.M_PI_get();
  public static readonly int gdDashSize = libgdPINVOKE.gdDashSize_get();
  public static readonly int gdStyled = libgdPINVOKE.gdStyled_get();
  public static readonly int gdBrushed = libgdPINVOKE.gdBrushed_get();
  public static readonly int gdStyledBrushed = libgdPINVOKE.gdStyledBrushed_get();
  public static readonly int gdTiled = libgdPINVOKE.gdTiled_get();
  public static readonly int gdTransparent = libgdPINVOKE.gdTransparent_get();
  public static readonly int gdAntiAliased = libgdPINVOKE.gdAntiAliased_get();
  public static readonly int gdFTEX_LINESPACE = libgdPINVOKE.gdFTEX_LINESPACE_get();
  public static readonly int gdFTEX_CHARMAP = libgdPINVOKE.gdFTEX_CHARMAP_get();
  public static readonly int gdFTEX_RESOLUTION = libgdPINVOKE.gdFTEX_RESOLUTION_get();
  public static readonly int gdFTEX_DISABLE_KERNING = libgdPINVOKE.gdFTEX_DISABLE_KERNING_get();
  public static readonly int gdFTEX_XSHOW = libgdPINVOKE.gdFTEX_XSHOW_get();
  public static readonly int gdFTEX_FONTPATHNAME = libgdPINVOKE.gdFTEX_FONTPATHNAME_get();
  public static readonly int gdFTEX_FONTCONFIG = libgdPINVOKE.gdFTEX_FONTCONFIG_get();
  public static readonly int gdFTEX_RETURNFONTPATHNAME = libgdPINVOKE.gdFTEX_RETURNFONTPATHNAME_get();
  public static readonly int gdFTEX_Unicode = libgdPINVOKE.gdFTEX_Unicode_get();
  public static readonly int gdFTEX_Shift_JIS = libgdPINVOKE.gdFTEX_Shift_JIS_get();
  public static readonly int gdFTEX_Big5 = libgdPINVOKE.gdFTEX_Big5_get();
  public static readonly int gdFTEX_Adobe_Custom = libgdPINVOKE.gdFTEX_Adobe_Custom_get();
  public static readonly int gdDisposalUnknown = libgdPINVOKE.gdDisposalUnknown_get();
  public static readonly int gdDisposalNone = libgdPINVOKE.gdDisposalNone_get();
  public static readonly int gdDisposalRestoreBackground = libgdPINVOKE.gdDisposalRestoreBackground_get();
  public static readonly int gdDisposalRestorePrevious = libgdPINVOKE.gdDisposalRestorePrevious_get();

  public static readonly int gdArc = libgdPINVOKE.gdArc_get();
  public static readonly int gdPie = libgdPINVOKE.gdPie_get();
  public static readonly int gdChord = libgdPINVOKE.gdChord_get();
  public static readonly int gdNoFill = libgdPINVOKE.gdNoFill_get();
  public static readonly int gdEdged = libgdPINVOKE.gdEdged_get();
  public static readonly int GD2_CHUNKSIZE = libgdPINVOKE.GD2_CHUNKSIZE_get();
  public static readonly int GD2_CHUNKSIZE_MIN = libgdPINVOKE.GD2_CHUNKSIZE_MIN_get();
  public static readonly int GD2_CHUNKSIZE_MAX = libgdPINVOKE.GD2_CHUNKSIZE_MAX_get();
  public static readonly int GD2_VERS = libgdPINVOKE.GD2_VERS_get();
  public static readonly string GD2_ID = libgdPINVOKE.GD2_ID_get();
  public static readonly int GD2_FMT_RAW = libgdPINVOKE.GD2_FMT_RAW_get();
  public static readonly int GD2_FMT_COMPRESSED = libgdPINVOKE.GD2_FMT_COMPRESSED_get();
  public static readonly int GD_FLIP_HORINZONTAL = libgdPINVOKE.GD_FLIP_HORINZONTAL_get();
  public static readonly int GD_FLIP_VERTICAL = libgdPINVOKE.GD_FLIP_VERTICAL_get();
  public static readonly int GD_FLIP_BOTH = libgdPINVOKE.GD_FLIP_BOTH_get();
  public static readonly int GD_CMP_IMAGE = libgdPINVOKE.GD_CMP_IMAGE_get();
  public static readonly int GD_CMP_NUM_COLORS = libgdPINVOKE.GD_CMP_NUM_COLORS_get();
  public static readonly int GD_CMP_COLOR = libgdPINVOKE.GD_CMP_COLOR_get();
  public static readonly int GD_CMP_SIZE_X = libgdPINVOKE.GD_CMP_SIZE_X_get();
  public static readonly int GD_CMP_SIZE_Y = libgdPINVOKE.GD_CMP_SIZE_Y_get();
  public static readonly int GD_CMP_TRANSPARENT = libgdPINVOKE.GD_CMP_TRANSPARENT_get();
  public static readonly int GD_CMP_BACKGROUND = libgdPINVOKE.GD_CMP_BACKGROUND_get();
  public static readonly int GD_CMP_INTERLACE = libgdPINVOKE.GD_CMP_INTERLACE_get();
  public static readonly int GD_CMP_TRUECOLOR = libgdPINVOKE.GD_CMP_TRUECOLOR_get();
  public static readonly int GD_RESOLUTION = libgdPINVOKE.GD_RESOLUTION_get();
}

}
