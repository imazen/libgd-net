/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Imazen.LibGD.Native {

using System;
using System.Runtime.InteropServices;

public class gdSink : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal gdSink(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(gdSink obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~gdSink() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libgdPINVOKE.delete_gdSink(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_f_p_void_p_q_const__char_int__int sink {
    set {
      libgdPINVOKE.gdSink_sink_set(swigCPtr, SWIGTYPE_p_f_p_void_p_q_const__char_int__int.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libgdPINVOKE.gdSink_sink_get(swigCPtr);
      SWIGTYPE_p_f_p_void_p_q_const__char_int__int ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_void_p_q_const__char_int__int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_void context {
    set {
      libgdPINVOKE.gdSink_context_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libgdPINVOKE.gdSink_context_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public gdSink() : this(libgdPINVOKE.new_gdSink(), true) {
  }

}

}
