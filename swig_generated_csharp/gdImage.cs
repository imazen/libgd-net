/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Imazen.LibGD.Native {

using System;
using System.Runtime.InteropServices;

public class gdImage : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal gdImage(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(gdImage obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~gdImage() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libgdPINVOKE.delete_gdImage(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_p_unsigned_char pixels {
    set {
      libgdPINVOKE.gdImage_pixels_set(swigCPtr, SWIGTYPE_p_p_unsigned_char.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libgdPINVOKE.gdImage_pixels_get(swigCPtr);
      SWIGTYPE_p_p_unsigned_char ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_p_unsigned_char(cPtr, false);
      return ret;
    } 
  }

  public int sx {
    set {
      libgdPINVOKE.gdImage_sx_set(swigCPtr, value);
    } 
    get {
      int ret = libgdPINVOKE.gdImage_sx_get(swigCPtr);
      return ret;
    } 
  }

  public int sy {
    set {
      libgdPINVOKE.gdImage_sy_set(swigCPtr, value);
    } 
    get {
      int ret = libgdPINVOKE.gdImage_sy_get(swigCPtr);
      return ret;
    } 
  }

  public int colorsTotal {
    set {
      libgdPINVOKE.gdImage_colorsTotal_set(swigCPtr, value);
    } 
    get {
      int ret = libgdPINVOKE.gdImage_colorsTotal_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int red {
    set {
      libgdPINVOKE.gdImage_red_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libgdPINVOKE.gdImage_red_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int green {
    set {
      libgdPINVOKE.gdImage_green_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libgdPINVOKE.gdImage_green_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int blue {
    set {
      libgdPINVOKE.gdImage_blue_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libgdPINVOKE.gdImage_blue_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int open {
    set {
      libgdPINVOKE.gdImage_open_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libgdPINVOKE.gdImage_open_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public int transparent {
    set {
      libgdPINVOKE.gdImage_transparent_set(swigCPtr, value);
    } 
    get {
      int ret = libgdPINVOKE.gdImage_transparent_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int polyInts {
    set {
      libgdPINVOKE.gdImage_polyInts_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libgdPINVOKE.gdImage_polyInts_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public int polyAllocated {
    set {
      libgdPINVOKE.gdImage_polyAllocated_set(swigCPtr, value);
    } 
    get {
      int ret = libgdPINVOKE.gdImage_polyAllocated_get(swigCPtr);
      return ret;
    } 
  }

  public gdImage brush {
    set {
      libgdPINVOKE.gdImage_brush_set(swigCPtr, gdImage.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libgdPINVOKE.gdImage_brush_get(swigCPtr);
      gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
      return ret;
    } 
  }

  public gdImage tile {
    set {
      libgdPINVOKE.gdImage_tile_set(swigCPtr, gdImage.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libgdPINVOKE.gdImage_tile_get(swigCPtr);
      gdImage ret = (cPtr == IntPtr.Zero) ? null : new gdImage(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int brushColorMap {
    set {
      libgdPINVOKE.gdImage_brushColorMap_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libgdPINVOKE.gdImage_brushColorMap_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int tileColorMap {
    set {
      libgdPINVOKE.gdImage_tileColorMap_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libgdPINVOKE.gdImage_tileColorMap_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public int styleLength {
    set {
      libgdPINVOKE.gdImage_styleLength_set(swigCPtr, value);
    } 
    get {
      int ret = libgdPINVOKE.gdImage_styleLength_get(swigCPtr);
      return ret;
    } 
  }

  public int stylePos {
    set {
      libgdPINVOKE.gdImage_stylePos_set(swigCPtr, value);
    } 
    get {
      int ret = libgdPINVOKE.gdImage_stylePos_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int style {
    set {
      libgdPINVOKE.gdImage_style_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libgdPINVOKE.gdImage_style_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public int interlace {
    set {
      libgdPINVOKE.gdImage_interlace_set(swigCPtr, value);
    } 
    get {
      int ret = libgdPINVOKE.gdImage_interlace_get(swigCPtr);
      return ret;
    } 
  }

  public int thick {
    set {
      libgdPINVOKE.gdImage_thick_set(swigCPtr, value);
    } 
    get {
      int ret = libgdPINVOKE.gdImage_thick_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int alpha {
    set {
      libgdPINVOKE.gdImage_alpha_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libgdPINVOKE.gdImage_alpha_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public int trueColor {
    set {
      libgdPINVOKE.gdImage_trueColor_set(swigCPtr, value);
    } 
    get {
      int ret = libgdPINVOKE.gdImage_trueColor_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_p_int tpixels {
    set {
      libgdPINVOKE.gdImage_tpixels_set(swigCPtr, SWIGTYPE_p_p_int.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libgdPINVOKE.gdImage_tpixels_get(swigCPtr);
      SWIGTYPE_p_p_int ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_p_int(cPtr, false);
      return ret;
    } 
  }

  public int alphaBlendingFlag {
    set {
      libgdPINVOKE.gdImage_alphaBlendingFlag_set(swigCPtr, value);
    } 
    get {
      int ret = libgdPINVOKE.gdImage_alphaBlendingFlag_get(swigCPtr);
      return ret;
    } 
  }

  public int saveAlphaFlag {
    set {
      libgdPINVOKE.gdImage_saveAlphaFlag_set(swigCPtr, value);
    } 
    get {
      int ret = libgdPINVOKE.gdImage_saveAlphaFlag_get(swigCPtr);
      return ret;
    } 
  }

  public int AA {
    set {
      libgdPINVOKE.gdImage_AA_set(swigCPtr, value);
    } 
    get {
      int ret = libgdPINVOKE.gdImage_AA_get(swigCPtr);
      return ret;
    } 
  }

  public int AA_color {
    set {
      libgdPINVOKE.gdImage_AA_color_set(swigCPtr, value);
    } 
    get {
      int ret = libgdPINVOKE.gdImage_AA_color_get(swigCPtr);
      return ret;
    } 
  }

  public int AA_dont_blend {
    set {
      libgdPINVOKE.gdImage_AA_dont_blend_set(swigCPtr, value);
    } 
    get {
      int ret = libgdPINVOKE.gdImage_AA_dont_blend_get(swigCPtr);
      return ret;
    } 
  }

  public int cx1 {
    set {
      libgdPINVOKE.gdImage_cx1_set(swigCPtr, value);
    } 
    get {
      int ret = libgdPINVOKE.gdImage_cx1_get(swigCPtr);
      return ret;
    } 
  }

  public int cy1 {
    set {
      libgdPINVOKE.gdImage_cy1_set(swigCPtr, value);
    } 
    get {
      int ret = libgdPINVOKE.gdImage_cy1_get(swigCPtr);
      return ret;
    } 
  }

  public int cx2 {
    set {
      libgdPINVOKE.gdImage_cx2_set(swigCPtr, value);
    } 
    get {
      int ret = libgdPINVOKE.gdImage_cx2_get(swigCPtr);
      return ret;
    } 
  }

  public int cy2 {
    set {
      libgdPINVOKE.gdImage_cy2_set(swigCPtr, value);
    } 
    get {
      int ret = libgdPINVOKE.gdImage_cy2_get(swigCPtr);
      return ret;
    } 
  }

  public uint res_x {
    set {
      libgdPINVOKE.gdImage_res_x_set(swigCPtr, value);
    } 
    get {
      uint ret = libgdPINVOKE.gdImage_res_x_get(swigCPtr);
      return ret;
    } 
  }

  public uint res_y {
    set {
      libgdPINVOKE.gdImage_res_y_set(swigCPtr, value);
    } 
    get {
      uint ret = libgdPINVOKE.gdImage_res_y_get(swigCPtr);
      return ret;
    } 
  }

  public int paletteQuantizationMethod {
    set {
      libgdPINVOKE.gdImage_paletteQuantizationMethod_set(swigCPtr, value);
    } 
    get {
      int ret = libgdPINVOKE.gdImage_paletteQuantizationMethod_get(swigCPtr);
      return ret;
    } 
  }

  public int paletteQuantizationSpeed {
    set {
      libgdPINVOKE.gdImage_paletteQuantizationSpeed_set(swigCPtr, value);
    } 
    get {
      int ret = libgdPINVOKE.gdImage_paletteQuantizationSpeed_get(swigCPtr);
      return ret;
    } 
  }

  public int paletteQuantizationMinQuality {
    set {
      libgdPINVOKE.gdImage_paletteQuantizationMinQuality_set(swigCPtr, value);
    } 
    get {
      int ret = libgdPINVOKE.gdImage_paletteQuantizationMinQuality_get(swigCPtr);
      return ret;
    } 
  }

  public int paletteQuantizationMaxQuality {
    set {
      libgdPINVOKE.gdImage_paletteQuantizationMaxQuality_set(swigCPtr, value);
    } 
    get {
      int ret = libgdPINVOKE.gdImage_paletteQuantizationMaxQuality_get(swigCPtr);
      return ret;
    } 
  }

  public gdInterpolationMethod interpolation_id {
    set {
      libgdPINVOKE.gdImage_interpolation_id_set(swigCPtr, (int)value);
    } 
    get {
      gdInterpolationMethod ret = (gdInterpolationMethod)libgdPINVOKE.gdImage_interpolation_id_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_f_double__double interpolation {
    set {
      libgdPINVOKE.gdImage_interpolation_set(swigCPtr, SWIGTYPE_p_f_double__double.getCPtr(value));
    } 
    get {
      IntPtr cPtr = libgdPINVOKE.gdImage_interpolation_get(swigCPtr);
      SWIGTYPE_p_f_double__double ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_f_double__double(cPtr, false);
      return ret;
    } 
  }

  public gdImage() : this(libgdPINVOKE.new_gdImage(), true) {
  }

}

}
